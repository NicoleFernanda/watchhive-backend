"""add new tv data to new media table

Revision ID: cabdbecb1080
Revises: e7b5f995734c
Create Date: 2025-09-15 20:10:46.328855

"""
import csv
from datetime import date
from pathlib import Path
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'cabdbecb1080'
down_revision: Union[str, Sequence[str], None] = 'e7b5f995734c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

CSV_PATH = Path(__file__).parent.parent / "data" / "tv_series_data.csv"

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()

    media_table = sa.table(
        "media",
        sa.column("id_themoviedb", sa.Integer),
        sa.column("id_imdb", sa.String),
        sa.column("title", sa.String),
        sa.column("original_title", sa.String),
        sa.column("description", sa.Text),
        sa.column("dt_launch", sa.Date),
        sa.column("original_language", sa.String),
        sa.column("media_type", sa.String),
        sa.column("poster_url", sa.String),
        sa.column("popularity", sa.Float),
        sa.column("vote_average", sa.Float),
        sa.column("vote_count", sa.Integer),
        sa.column("adult", sa.Boolean),
    )

    items = []
    with open(CSV_PATH, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            items.append({
                "id_themoviedb": int(row["id_themoviedb"]),
                "id_imdb": row["id_imdb"],
                "title": row["title"],
                "original_title": row["original_title"] or None,
                "description": row["description"] or None,
                "dt_launch": date.fromisoformat(row["dt_launch"]) if row["dt_launch"] else None,
                "original_language": row["original_language"] or None,
                "media_type": "filme" if row["media_type"] == "movie" else "sÃ©rie",
                "poster_url": row["poster_url"] or None,
                "popularity": float(row["popularity"]) if row["popularity"] else None,
                "vote_average": float(row["vote_average"]) if row["vote_average"] else None,
                "vote_count": int(row["vote_count"]) if row["vote_count"] else None,
                "adult": (row["adult"] or "false").lower() == "true"
            })

    if items:
        conn.execute(media_table.insert(), items)


def downgrade() -> None:
    """Downgrade schema."""
    conn = op.get_bind()

    ids = []
    with open(CSV_PATH, newline="", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            ids.append(int(row["id_themoviedb"]))

    if ids:
        conn.execute(
            sa.text("DELETE FROM media WHERE id_themoviedb = ANY(:ids)"),
            {"ids": ids}
        )
